;;; esqlite-helm-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "esqlite-helm" "esqlite-helm.el" (0 0 0 0))
;;; Generated autoloads from esqlite-helm.el

(autoload 'esqlite-helm-define "esqlite-helm" "\
This function provides extension while `helm' source composing.
Normally, should not override `candidates-process', `candidates',
 `candidate-transformer' directive.

Following esqlite specific directive:

* `sqlite-db' File name of sqlite database or esqlite stream or
   symbol point to filename.
* `sqlite-async' Indicate SOURCE is async.

You must choose `sqlite-table' or `sqlite-composer' directive.

* `sqlite-table' Table name of result set. This directive only meaningful
     `sqlite-composer' is not specified.
  `sqlite-column' Column name of you desired to search.
  `sqlite-display-column' Column name of select.
* `sqlite-composer' Function which accept one argument `helm-pattern' and return
    a sql query string.

Following default directive:
`real-to-display' directive accept a list of string, generated by SELECT statement
 from `sqlite-composer' or `sqlite-table'. Default behavior is displaying all columns
 of SELECT. `volatile'

Other helm directive is overridable.

If SOURCE doesn't contain `sqlite-async', you should add LIMIT statement
 to SQL which composed by `sqlite-composer'.
 See the syntax of LIMIT statement.
http://www.sqlite.org/lang_select.html

Example:
\(helm (esqlite-helm-define
         `((sqlite-db . \"/path/to/some/sqlite.db\")
           (sqlite-table . \"tbl1\"))))

\(fn SOURCE)" nil nil)

(autoload 'esqlite-helm-glob-to-like "esqlite-helm" "\
Convenient function to provide unix like GLOB convert to sql like pattern.

`*' Like glob, match to text more equal zero.
`?' Like glob, match to a char in text.

Above syntax can escape by \\ (backslash). But no relation to ESCAPE-CHAR.
See related information at `esqlite-escape-like'.

e.g. hoge*foo -> hoge%foo
     hoge?foo -> hoge_foo

\(fn GLOB &optional ESCAPE-CHAR)" nil nil)

(autoload 'esqlite-helm-glob-to-fuzzy-like "esqlite-helm" "\
Convert pseudo GLOB to like syntax to support helm behavior.

Following extended syntax:

`^': Like regexp, match to start of text.
`$': Like regexp, match to end of text.

Above syntax can escape by \\ (backslash). But no relation to ESCAPE-CHAR.
See related information at `esqlite-escape-like'.

ESCAPE-CHAR pass to `esqlite-helm-glob-to-like'

\(fn GLOB &optional ESCAPE-CHAR)" nil nil)

(autoload 'esqlite-helm-glob-to-fuzzy-glob "esqlite-helm" "\
Convert GLOB to fuzzy glob to support helm behavior

There are extended syntax `^' `$'. See `esqlite-helm-glob-to-fuzzy-like'.

\(fn GLOB)" nil nil)

(register-definition-prefixes "esqlite-helm" '("esqlite-helm-"))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; esqlite-helm-autoloads.el ends here
